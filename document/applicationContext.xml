<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
						http://www.springframework.org/schema/security 
						http://www.springframework.org/schema/security/spring-security-3.2.xsd
						http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						http://www.springframework.org/schema/data/jpa 
						http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.0.xsd">
		
	<!-- 采用注解的方式配置 Bean, Activates annotation-based bean configuration -->
	<context:annotation-config />

	<!-- 配置要扫描的包 Scans for application @Components to deploy -->
	<context:component-scan base-package="com.web.api.core.dao" />
	<context:component-scan base-package="com.web.api.core.service" />
	<context:component-scan base-package="com.web.business.system.dao" />
	<context:component-scan base-package="com.web.business.system.service" />
	<context:component-scan base-package="com.web.business.test.dao" />
	<context:component-scan base-package="com.web.business.test.service" />

	<!-- 数据库配置文件位置 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	
	<!-- 配置dbcp数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minIdle" value="${jdbc.minIdle}" />         <!-- 队列中的最小等待数 -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />         <!-- 队列中的最大等待数 -->
		<property name="maxWait" value="${jdbc.maxWait}" />         <!-- 最长等待时间，单位毫秒 -->
		<property name="maxActive" value="${jdbc.maxActive}" />     <!-- 最大活跃数 -->
		<property name="initialSize" value="${jdbc.initialSize}" /> <!-- 初始大小 -->
	</bean>

	<!-- 使用JDBC事物 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- AOP配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*"  propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*"  propagation="REQUIRED" />
			<tx:method name="deleteById*"  propagation="REQUIRED" />
			<tx:method name="exists*" read-only="true" propagation="REQUIRED" />
			<tx:method name="selectById*" read-only="true" propagation="REQUIRED" />
			<tx:method name="selectAll*" read-only="true" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置AOP切面 -->
	<aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com..service..*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
    </aop:config>
	

	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<property name="mapperLocations">
		 	<list>
                <value>classpath:mapper/**/*.xml</value>
            </list>
		</property>

		<!-- 自动配置别名 -->  
		<property name="typeAliasesPackage" value="com.web.business.system.entity"></property>
	</bean>

	<!-- 配置SQLSession模板 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!--  Mapper Bean 创建 Dao Bean（只需提供接口不需提供实现类 ）   -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	  	<property name="basePackage" value="com.web.business.system.dao" />
	  	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- BEGIN -->
	<!-- 创建一个流程引擎的配置对象  -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<!-- 设置数据库schema的更新方式 -->
		<property name="databaseSchemaUpdate" value="true" />
		<!-- 是否启动jobExecutor -->
		<property name="jobExecutorActivate" value="false" />
		<!-- 
		<property name="deploymentResources" value="classpath:activiti/*.activiti.bpmn20.xml"/>
		-->
		<!-- Email配置 -->
		<property name="mailServerHost" value="mail.xxxx.com" />
		<property name="mailServerPort" value="25" />
		<property name="mailServerDefaultFrom" value="hrj@xxxx.com" />
		<property name="mailServerUsername" value="xxxx" />
		<property name="mailServerPassword" value="xxxx" />
	</bean>

	<!-- 创建一个流程引擎bean -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>

	<!-- 创建Activiti提供的各种服务 Begin -->
	
	<!-- 工作流仓储服务 -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />

	<!-- 工作流运行服务 -->
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />

	<!--  工作流任务服务-->
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />

	<!--  工作流历史数据服务-->
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />

	<!--  工作流管理服务-->
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />

	<!-- 工作流唯一服务 -->
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />

	<bean id="workflowImpl" class="activiti.factory.impl.WorkflowImpl"
		p:repositoryService-ref="repositoryService"
		p:runtimeService-ref="runtimeService" 
		p:taskService-ref="taskService"
		p:historyService-ref="historyService"
		p:managementService-ref="managementService"
		p:identityService-ref="identityService"/>
	<!-- 创建Activiti提供的各种服务 End -->
	
	<!-- END -->

</beans>